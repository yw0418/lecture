<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">

	<!-- 수강신청 목록 불러오기 -->
	<select id='lectureList' resultType="kr.co.vo.LectureVO">
		<![CDATA[
		SELECT a.LECTURENO, a.TITLE, a.CONTENT, a.TEACHERNO, a.NOWPEOPLE, a.MAXPEOPLE, b.NAME
  		FROM LECTURE a INNER JOIN USERINFO b ON b.USERNO = a.TEACHERNO ORDER BY LECTURENO DESC
    	]]>
	</select>
	
	<!-- 글 하나 불러오기 -->
	<select id='contentList' parameterType="java.lang.Integer" resultType="kr.co.vo.LectureVO">
		<![CDATA[
		SELECT a.LECTURENO, a.TITLE, a.LECTUREDATE, a.CONTENT, a.TEACHERNO, a.NOWPEOPLE, a.MAXPEOPLE, b.NAME
  		FROM LECTURE a INNER JOIN USERINFO b ON b.USERNO = a.TEACHERNO WHERE LECTURENO = #{lectureNo}
    	]]>
	</select>
	
	<!-- 수강신청 -->
	<insert id='signList' parameterType="java.util.HashMap">
	    <selectKey keyProperty="signNo" resultType="java.lang.Integer" order="BEFORE">
        SELECT SIGN_SEQ.NEXTVAL from dual
    	</selectKey>
		<![CDATA[
		INSERT INTO SIGN(SIGNNO, SIGNUSERNO, SIGNLECTURENO, SIGNDATE) VALUES(#{signNo}, #{signUserNo}, #{signLectureNo}, sysdate)
    	]]>
	</insert>
	
	<!-- (교사)강의목록 -->
	<select id='teacherList' parameterType="java.lang.String" resultType="kr.co.vo.LectureVO">
		<![CDATA[
		SELECT l.lECTURENO, l.TITLE, l.LECTUREDATE, l.MAXPEOPLE, l.NOWPEOPLE, u.NAME
		FROM LECTURE l
		INNER JOIN USERINFO u 
		ON U.USERNO = l.TEACHERNO
		WHERE U.ID = #{id}
		ORDER BY l.LECTUREDATE DESC
    	]]>
	</select>
	
	<!--신청인원 증가 -->
	<update id="nowPeopleAdd">
		UPDATE LECTURE set NOWPEOPLE = NOWPEOPLE + 1 where LECTURENO=#{lectureNo}
	</update>
	
	<!-- (학생) 수강신청 목록 불러오기 -->
	<select id='addList' resultType="HashMap">
		<![CDATA[
  		SELECT a.title, a.lecturedate, a.nowpeople, a.maxpeople, b.signdate, a.CONTENT, c.NAME
  		FROM LECTURE a 
  		INNER JOIN SIGN b 
  		ON b.signlectureno = a.LECTURENO 
  		INNER JOIN USERINFO c 
  		ON a.teacherno = c.USERNO
  		where signuserno=#{signuserno} ORDER BY b.SIGNDATE DESC
    	]]>
	</select>
	
	<!-- 아이디 번호로 바꾸기 -->
	<select id='changeId' parameterType="java.lang.String" resultType="java.lang.Integer">
		<![CDATA[
	  	SELECT s.SIGNUSERNO
	  	FROM USERINFO u
	  	INNER JOIN SIGN s
	  	ON u.USERNO = s.SIGNUSERNO
	  	WHERE ID = #{id} GROUP BY s.SIGNUSERNO
    	]]>
	</select>
	
	<!-- 기존 수강신청한 목록인지 조회 -->
	<select id='isSign' resultType="java.lang.Integer" parameterType="Map">
		<![CDATA[
		SELECT SIGNNO FROM SIGN WHERE SIGNUSERNO = #{signuserno} AND SIGNLECTURENO = #{signlectureno}
    	]]>
	</select>
	
	<!-- lecture페이징처리 카운트 -->
	<select id='lectureCount' resultType="java.lang.Integer">
		SELECT COUNT(*) FROM LECTURE  WHERE 1=1
		<include refid="search"></include>
	</select>
	
	<!-- user 페이징처리 카운트 -->
	<select id='userCount' resultType="java.lang.Integer">
		<![CDATA[
		SELECT COUNT(*) FROM USERINFO
    	]]>
	</select>
	
	<!-- 페이징 처리 후 유저 조회 -->
	<select id="selectUser" resultType="kr.co.vo.UserVO">
		<![CDATA[
		SELECT U.ID, NAME, MAIL, PHONE, USERSTATUS, S.SUBNM, DELFLAG, REGDTM, U.USERNO 
		FROM USERINFO U
		INNER JOIN SUBCOMMON S
		ON U.AUTH = S.SUBID
		WHERE USERNO BETWEEN #{start} AND #{end}
		ORDER BY REGDTM DESC
		]]>
	</select>
	
	<!-- 페이징 처리 후 게시글 조회 -->
	<select id="selectLecture" resultType="kr.co.vo.LectureVO">
		SELECT MP.*
		 FROM ( 
				SELECT a.LECTURENO, a.TITLE, a.LECTUREDATE, a.NOWPEOPLE, a.MAXPEOPLE, b.NAME, ROW_NUMBER() OVER(ORDER BY USERNO DESC) AS RNUM
				FROM LECTURE a INNER JOIN USERINFO b ON b.USERNO = a.TEACHERNO 
				WHERE 1=1
		        <include refid="search"></include>               ) MP
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY LECTURENO DESC
	</select>
	
	<!-- 강의등록 -->
	<insert id='addLecture'>
	    <selectKey keyProperty="lectureNo" resultType="java.lang.Integer" order="BEFORE">
        select LECTURE_SEQ.NEXTVAL from dual
    	</selectKey>
		<![CDATA[
		INSERT INTO LECTURE(LECTURENO, TITLE, CONTENT, LECTUREDATE, TEACHERNO, MAXPEOPLE, NOWPEOPLE) VALUES(#{lectureNo}, #{title}, #{content}, sysdate, #{teacherNo}, #{maxPeople}, '0')
    	]]>
	</insert>
	
	<!-- (교사)강의 삭제 -->
	<delete id="delOne">
		<![CDATA[
		DELETE FROM LECTURE WHERE LECTURENO = #{lectureNo}
		]]>
	</delete>
	
	<!-- 첨부파일 -->
	<insert id="insertFile" parameterType="hashMap">
		<selectKey keyProperty="fileNo" resultType="java.lang.Integer" order="BEFORE">
        SELECT FILE_SEQ.NEXTVAL from dual
    	</selectKey>
		<![CDATA[
		INSERT INTO FILETB(
			FILE_NO,
			BNO,
			ORG_FILE_NAME,
			STORED_FILE_NAME,
			FILE_SIZE
		)VALUES(
			#{fileNo},
			#{BNO},
			#{ORG_FILE_NAME},
			#{STORED_FILE_NAME},
			#{FILE_SIZE}
		)
		]]>
    </insert>
	
	<!-- 첨부파일 조회 -->
	<select id="selectFileList" parameterType="int" resultType="hashMap">
		<![CDATA[
		SELECT FILE_NO,
			   ORG_FILE_NAME,
			   ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
		  FROM FILETB
    	 WHERE BNO = #{BNO}
    	   AND DEL_GB = 'N'
    	 ORDER BY FILE_NO ASC
		   ]]>
	</select>
	
	<!-- 첨부파일 다운 -->
	<select id="selectFileInfo" parameterType="hashMap" resultType="hashMap">
	<![CDATA[
		SELECT 
			STORED_FILE_NAME,
			ORG_FILE_NAME
		FROM FILETB
		WHERE FILE_NO = #{FILE_NO}
		]]>
	</select>
	
	<!-- 첨부파일 수정 -->
    <update id="updateFile" parameterType="hashMap">
    <![CDATA[
    	UPDATE FILETB SET
    	DEL_GB = 'Y'
    	WHERE FILE_NO = #{FILE_NO}
    	]]>
    </update>
    
    <!-- (교사) 강의  수정 -->
    <update id="updateStudy">
    <![CDATA[
	UPDATE LECTURE SET TITLE=#{title}, CONTENT=#{content}, MAXPEOPLE=#{maxPeople} WHERE LECTURENO=#{lectureNo}
    	]]>
    </update>
    
   	 <sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">AND TITLE LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'c'.toString()">AND CONTENT LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'w'.toString()">AND NAME LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'tc'.toString()">AND (TITLE LIKE '%' || #{keyword} || '%') or (CONTENT LIKE '%' || #{keyword} || '%')</if>
		</if>
	</sql>
	
</mapper>